.Dd October 19, 2022
.Dt BSD.PROG.MK 5
.Os
.Sh NAME
.Nm bsd.prog.mk
.Nd Makefile fragment for building programs
.Sh SYNOPSIS
.Fd .include <bsd.prog.mk>
.Sh DESCRIPTION
.Nm
contains the
.Xr bmake 1
framework for building programs.
The template defines several targets and variables that
help automate the build process.
.Pp
The targets defined by
.Nm
deliberately avoid exposing any MacOS-specific facilities.
This is to ensure Makefiles maintain as much compatibility
with other BSD makes as is practical.
If your program build makes extensive use of MacOS-specific
tools,
you can create your
own
.Nm bmake
template files that augment or override these targets, and
.Ic .include
those in your Makefiles in addition to
.Nm bsd.prog.mk .
This ensures a clean separation between MacOS-specific and
BSD-generic functionality.
.Sh TARGETS
.Bl -tag -width Ds
.It Ic all
Default target.
Build the program and its manual pages.
.It Ic clean
Remove the program, object files, and any automatically
generated files.
.It Ic cleandir
Remove all the files removed by
.Ic clean ,
as well as the tags file.
.It Ic includes
Install any header files.
.It Ic install
Install the program and its manual pages.
If the default install recipe is used, the targets
.Ic beforeinstall
and
.Ic afterinstall
can be used to perform actions immediately before and
after the
.Ic install
target is run.
.It Ic tags
Generate a tags file from the source files.
.El
.Sh VARIABLES
.Pp
Variables are used to customize build behavior.
Many variables have default setting that can be
overridden if desired, such as
.Ev CC
and
.Ev YACC .
Other variables are intended to be augmented.
One example is
.Ev CFLAGS .
If you directly assign a value to
.Ev CFLAGS ,
you will override the build system defaults,
which might include compiler diagnostic flags
implicitly added by
.Ic WARNINGS=Yes .
For those variables, you should augment the defaults by appending
to the existing settings:
.Ic CFLAGS+=-Dfoo=bar .
Some experimentation might be necessary to figure out which behavior
works best in a particular setting.
.\"
.Bl -tag -width Ds
.\"
.It Ev CC
The name of the C compiler.
.\"
.It Ev CDIAGFLAGS
Flags appended to
.Ev CFLAGS
when
.Ev WARNINGS
is set.
.\"
.It Ev CFLAGS
Flags passed to the compiler for building.
See also
.Ev COPTS ,
.Ev CDIAGFLAGS .
.\"
.It Ev CLEANFILES
Additional files to be removed by the
.Ic clean
target.
.\"
.It Ev COPTS
Supplementary options appended to 
.Ev CFLAGS
for building.
This variable is generally reserved for the user.
.\"
.It Ev CXXDIAGFLAGS
Flags appended to
.Ev CXXFLAGS
if
.Ev WARNINGS
is set.
.\"
.It Ev CXXFLAGS
Flags passed to the C++ compiler for building.
.\"
.It Ev CXXOPTS
Supplementary options appended to
.Ev CXXFLAGS
for building.
This variable is generally reserved for the user.
.\"
.It Ev DEBUG
Flags added to assembly, C[++] compiler, and linker passes.
If set, do not strip installed program binaries.
.\"
.It Ev DESTDIR
If defined, this path is prepended to pathnames of every file
installed by the
.Ic install
target.
It is mainly used to install files into a shadow directory where
they are used to create an installation package.
Typical usage is to specify the value on the command line
of the installation run.
For example, to install into the
.Pa /tmp/foo
directory (which must already exist):
.Pp
.Dl make -DDESTDIR=/tmp/foo install
.Pp
This convention relies on the
.Nm bmake
recipes prefixing all installation paths with
.Ic ${DESTDIR}
as follows:
.Pp
.Dl install foo ${DESTDIR}${BINDIR}/foo
.Pp
Note the absence of a
.Ql /
between
.Ic ${DESTDIR}
and
.Ic ${BINDIR} .
This ensures
.Ev BINDIR
will continue to work correctly if it contains
a relative path.
Your own
.Nm bmake
recipes should follow this convention.
.\"
.It Ev DPADD
Additional dependencies for the program.
Typically used to specify archive file dependencies.
.\"
.It Ev LD
The name of the linker.
.\"
.It Ev LDADD
Additional linker objects.
.\"
.It Ev LDFLAGS
Additional linker flags.
.\"
.It Ev LEX
The name of the lexer.
.\"
.It Ev LFLAGS
Flags passed to the lexer.
.\"
.It Ev LINKS
A list of binary links to create during install.
Each item should be a full pathname.
The list contains source-file target-file pairs.
For example, to link
.Pa /bin/test
and
.Pa /bin/[
use
.Pp
.Dl LINKS= ${DESTDIR}/bin/test ${DESTDIR}/bin/[
.It Ev MAN
The list of manual pages to install.
Defaults to
.Ic MAN= ${PROG}.1 ${PROGS}.1 .
.\"
.It Ev PROG
.Bq Required
The name of the program to build.
A manual page file of the name
.Ic ${PROG}.1
is assumed to be present.
.\"
.It Ev PROGS
Allows building multiple programs in a single directory.
For each
.Va p
in the
.Ev PROGS
list,
.Va p
will be built as though
.Ev PROG= Ns Va p
had been specified.
.Ev SRCS_ Ns Va p
will be used instead of
.Ev SRCS
to specify the sources.
The variables
.Ev SRCS_ Ns Va p ,
.Ev OBJS_ Ns Va p ,
.Ev DPADD_ Ns Va p ,
and
.Ev LDADD_ Ns Va p
may be defined, and will override the the values of their
corresponding unaugmented counterparts while building
.Va p .
.Pp
If both
.Ev PROG
and
.Ev PROGS
are defined, both variables will be combined to create
the list of programs to build.
.\"
.It Ev SRCS
A list of the source files from which to build the program.
.Nm bsd.prog.mk
implicitly recognizes a number of filename suffixes,
and invokes the corresponding compiler.
If
.Ev SRCS
is not defined,
.Ic ${PROG}.c
is assumed.
.\"
.It Ev WARNINGS
If set to
.Sq Yes ,
add
.Ev CDIAGFLAGS
to
.Ev CFLAGS
and
.Ev CXXDIAGFLAGS
to
.Ev CXXFLAGS .
.\"
.It Ev YACC
The name of the yacc compiler.
.\"
.It Ev YFLAGS
Flags passed to the yacc compiler for building.
.El
.Sh FILES
.Bl -tag -width Ds
.It Pa ../Makefile.inc
Common Makefile fragment for a set of programs, included automatically.
.El
.Sh SEE ALSO
.Xr bmake 1 ,
.Xr cc 1 ,
.Xr ld 1 

ABORT_ERROR	job.c	/^#define ABORT_ERROR	1	    \/* Because of an error /
ABORT_INTERRUPT	job.c	/^#define ABORT_INTERRUPT 2	    \/* Because it was i/
ABORT_WAIT	job.c	/^#define ABORT_WAIT	3	    \/* Waiting for jobs to f/
ARLONGNAMES1	arch.c	/^#define ARLONGNAMES1 "\/"$/
ARLONGNAMES2	arch.c	/^#define ARLONGNAMES2 "ARFILENAMES"$/
AR_DATE_SIZE	arch.c	/^#define AR_DATE_SIZE		(sizeof(dummy->ar_date))$/
AR_NAME_SIZE	arch.c	/^#define AR_NAME_SIZE		(sizeof(dummy->ar_name))$/
Arch	arch.c	/^} Arch;$/
ArchFindMember	arch.c	/^ArchFindMember($/
ArchMTimeMember	arch.c	/^ArchMTimeMember($/
ArchSVR4Entry	arch.c	/^ArchSVR4Entry(struct SVR4namelist *l, const char */
ArchTouch	arch.c	/^ArchTouch(const char *archive, const char *member)/
Arch_Init	arch.c	/^Arch_Init(void)$/
Arch_MTime	arch.c	/^Arch_MTime(GNode *gn)$/
Arch_MemMTime	arch.c	/^Arch_MemMTime(GNode *gn)$/
Arch_ParseArchive	arch.c	/^Arch_ParseArchive(const char **line, Lst nodes, Sy/
Arch_Touch	arch.c	/^Arch_Touch(GNode *gn)$/
BUF_DEF_SIZE	buf.c	/^#define BUF_DEF_SIZE	256U	\/* Default buffer size /
BUF_MARGIN	buf.c	/^#define BUF_MARGIN	256U	\/* Make sure we are comfo/
BufExpand	buf.c	/^BufExpand(Buffer bp, size_t nb)$/
Buf_AddChars	buf.c	/^Buf_AddChars(Buffer bp, size_t numBytes, const cha/
Buf_Init	buf.c	/^Buf_Init(Buffer bp, size_t size)$/
Buf_Reinit	buf.c	/^Buf_Reinit(Buffer bp, size_t size)$/
Buf_printf	buf.c	/^Buf_printf(Buffer bp, const char *fmt, ...)$/
COND_ELIFDEF_INDEX	cond.c	/^#define COND_ELIFDEF_INDEX	4$/
COND_ELIFMAKE_INDEX	cond.c	/^#define COND_ELIFMAKE_INDEX	6$/
COND_ELIFNDEF_INDEX	cond.c	/^#define COND_ELIFNDEF_INDEX	5$/
COND_ELIFNMAKE_INDEX	cond.c	/^#define COND_ELIFNMAKE_INDEX	7$/
COND_ELIF_INDEX	cond.c	/^#define COND_ELIF_INDEX		4$/
COND_ELSE_INDEX	cond.c	/^#define COND_ELSE_INDEX		8$/
COND_IFDEF_INDEX	cond.c	/^#define COND_IFDEF_INDEX	0$/
COND_IFMAKE_INDEX	cond.c	/^#define COND_IFMAKE_INDEX	2$/
COND_IFNDEF_INDEX	cond.c	/^#define COND_IFNDEF_INDEX	1$/
COND_IFNMAKE_INDEX	cond.c	/^#define COND_IFNMAKE_INDEX	3$/
COND_IF_INDEX	cond.c	/^#define COND_IF_INDEX		0$/
Cmd_Exec	cmd_exec.c	/^Cmd_Exec(const char *cmd, char **err)$/
CompatMake	compat.c	/^CompatMake(void *gnp,	\/* The node to make *\/$/
Compat_Init	compat.c	/^Compat_Init()$/
Compat_Run	compat.c	/^Compat_Run(Lst targs, bool *has_errors, bool *out_/
Compat_Update	compat.c	/^Compat_Update(GNode *gn)$/
CondCvtArg	cond.c	/^CondCvtArg(const char *str, double *value)$/
CondDoDefined	cond.c	/^CondDoDefined(struct Name *arg)$/
CondDoExists	cond.c	/^CondDoExists(struct Name *arg)$/
CondDoMake	cond.c	/^CondDoMake(struct Name *arg)$/
CondDoTarget	cond.c	/^CondDoTarget(struct Name *arg)$/
CondDoTargetWithCommands	cond.c	/^CondDoTargetWithCommands(struct Name *arg)$/
CondE	cond.c	/^CondE(bool doEval)$/
CondF	cond.c	/^CondF(bool doEval)$/
CondGetArg	cond.c	/^CondGetArg(const char **linePtr, struct Name *arg,/
CondHandleComparison	cond.c	/^CondHandleComparison(char *lhs, bool doFree, bool /
CondHandleDefault	cond.c	/^CondHandleDefault(bool doEval)$/
CondHandleNumber	cond.c	/^CondHandleNumber(bool doEval)$/
CondHandleString	cond.c	/^CondHandleString(bool doEval)$/
CondHandleVarSpec	cond.c	/^CondHandleVarSpec(bool doEval)$/
CondT	cond.c	/^CondT(bool doEval)$/
CondToken	cond.c	/^CondToken(bool doEval)$/
Cond_End	cond.c	/^Cond_End(void)$/
Cond_Eval	cond.c	/^Cond_Eval(const char *line)$/
DARCHIVE_INDEX	var.c	/^#define DARCHIVE_INDEX	12$/
DIMPSRC_INDEX	var.c	/^#define DIMPSRC_INDEX	16$/
DMEMBER_INDEX	var.c	/^#define DMEMBER_INDEX	14$/
DO_STAT_BUF	buf.c	/^#define DO_STAT_BUF(bp, nb)					\\$/
DPREFIX_INDEX	var.c	/^#define DPREFIX_INDEX	10$/
DTARGET_INDEX	var.c	/^#define DTARGET_INDEX	8$/
DirExpandCurlyi	direxpand.c	/^DirExpandCurlyi(const char *word, const char *ewor/
DirExpandWild	direxpand.c	/^#define DirExpandWild(s, l1, l2) DirExpandWildi(s,/
DirExpandWildi	direxpand.c	/^DirExpandWildi(const char *word, const char *eword/
DirPrintDir	dir.c	/^DirPrintDir(void *p)$/
DirPrintWord	direxpand.c	/^DirPrintWord(void *word)$/
Dir_AddDiri	dir.c	/^Dir_AddDiri(Lst path, const char *name, const char/
Dir_Concat	dir.c	/^Dir_Concat(Lst path1, Lst path2)$/
Dir_CopyDir	dir.c	/^Dir_CopyDir(void *p)$/
Dir_Destroy	dir.c	/^Dir_Destroy(void *pp)$/
Dir_Expandi	direxpand.c	/^Dir_Expandi(const char *word, const char *eword, L/
Dir_FindFileComplexi	dir.c	/^Dir_FindFileComplexi(const char *name, const char /
Dir_HasWildcardsi	direxpand.c	/^Dir_HasWildcardsi(const char *name, const char *en/
Dir_Init	dir.c	/^Dir_Init(void)$/
Dir_MTime	dir.c	/^Dir_MTime(GNode *gn)$/
Dir_MatchFilesi	dir.c	/^Dir_MatchFilesi(const char *word, const char *ewor/
Dir_PrintPath	dir.c	/^Dir_PrintPath(Lst path)$/
ERRMSG1	var.c	/^#define ERRMSG1 "Using $< in a non-suffix rule con/
ERRMSG2	var.c	/^#define ERRMSG2  "Using undefined dynamic variable/
EXTENDED2SIMPLE	var.c	/^#define EXTENDED2SIMPLE(i)	(((i)-LOCAL_SIZE)\/2)$/
Error	error.c	/^Error(const char *fmt, ...)$/
ExpandChildren	expandchildren.c	/^ExpandChildren(LstNode ln, \/* LstNode of child, s/
ExpandVarChildren	expandchildren.c	/^ExpandVarChildren(LstNode after, GNode *cgn, GNode/
ExpandWildChildren	expandchildren.c	/^ExpandWildChildren(LstNode after, GNode *cgn, GNod/
FARCHIVE_INDEX	var.c	/^#define FARCHIVE_INDEX	11$/
FIMPSRC_INDEX	var.c	/^#define FIMPSRC_INDEX	15$/
FMEMBER_INDEX	var.c	/^#define FMEMBER_INDEX	13$/
FPREFIX_INDEX	var.c	/^#define FPREFIX_INDEX	9$/
FTARGET_INDEX	var.c	/^#define FTARGET_INDEX	7$/
Fatal	error.c	/^Fatal(const char *fmt, ...)$/
Finish	error.c	/^Finish()$/
ForExec	for.c	/^ForExec(void *valuep, void *argp)$/
For_	for.c	/^struct For_ {$/
For_Accumulate	for.c	/^For_Accumulate(For *arg, const char *line)$/
For_Eval	for.c	/^For_Eval(const char *line)$/
For_Run	for.c	/^For_Run(For *arg)$/
GLOBAL_INDEX	var.c	/^#define GLOBAL_INDEX	-1$/
GUESS_EXPANSION	for.c	/^#define GUESS_EXPANSION 32$/
IS_A_MATCH	varmodifiers.c	/^#define IS_A_MATCH(cp, delim1, delim2) \\$/
IS_EXTENDED_F	var.c	/^#define IS_EXTENDED_F(i)	((i)%2 == 1)$/
If	cond.c	/^struct If {$/
Init	init.c	/^Init(void)$/
Init_Stats	stats.c	/^Init_Stats(void)$/
Job_AbortAll	job.c	/^Job_AbortAll(void)$/
Job_Empty	job.c	/^Job_Empty(void)$/
Job_Init	job.c	/^Job_Init(int maxJobs)$/
Job_Make	job.c	/^Job_Make(GNode *gn)$/
Job_Touch	engine.c	/^Job_Touch(GNode *gn)$/
Job_Wait	job.c	/^Job_Wait(void)$/
LOOP	var.c	/^#define LOOP(mask, value, do_stuff) \\$/
LinkParent	expandchildren.c	/^LinkParent(GNode *cgn, GNode *pgn)$/
LoopGrab	varmodifiers.c	/^LoopGrab(const char **s)$/
LoopStuff	varmodifiers.c	/^struct LoopStuff {$/
LoopVar	var.c	/^struct LoopVar$/
LstSrc	suff.c	/^} LstSrc;$/
Lst_AddNew	lst.lib/lstAddNew.c	/^Lst_AddNew(Lst l, void *d)$/
Lst_Append	lst.lib/lstAppend.c	/^Lst_Append(Lst l, LstNode after, void *d)$/
Lst_AtEnd	lst.lib/lstAppend.c	/^Lst_AtEnd(Lst l, void *d)$/
Lst_AtFront	lst.lib/lstInsert.c	/^Lst_AtFront(Lst l, void *d)$/
Lst_Clone	lst.lib/lstDupl.c	/^Lst_Clone(Lst nl, Lst l, DuplicateProc copyProc)$/
Lst_Concat	lst.lib/lstConcat.c	/^Lst_Concat(Lst l1, Lst l2)$/
Lst_ConcatDestroy	lst.lib/lstConcatDestroy.c	/^Lst_ConcatDestroy(Lst l1, Lst l2)$/
Lst_DeQueue	lst.lib/lstDeQueue.c	/^Lst_DeQueue(Lst l)$/
Lst_Destroy	lst.lib/lstDestroy.c	/^Lst_Destroy(Lst l, SimpleProc freeProc)$/
Lst_Every	lst.lib/lstForEachFrom.c	/^Lst_Every(Lst l, SimpleProc proc)$/
Lst_FindFrom	lst.lib/lstFindFrom.c	/^Lst_FindFrom(LstNode ln, FindProc cProc, void *d)$/
Lst_ForEachFrom	lst.lib/lstForEachFrom.c	/^Lst_ForEachFrom(LstNode ln, ForEachProc proc, void/
Lst_Insert	lst.lib/lstInsert.c	/^Lst_Insert(Lst l, LstNode before, void *d)$/
Lst_Member	lst.lib/lstMember.c	/^Lst_Member(Lst l, void *d)$/
Lst_Remove	lst.lib/lstRemove.c	/^Lst_Remove(Lst l, LstNode ln)$/
Lst_Replace	lst.lib/lstReplace.c	/^Lst_Replace(LstNode ln, void *d)$/
Lst_Requeue	lst.lib/lstRequeue.c	/^Lst_Requeue(Lst l, LstNode ln)$/
Lst_Succ	lst.lib/lstSucc.c	/^Lst_Succ(LstNode ln)$/
MACHINE	arch.c	/^#define MACHINE TARGET_MACHINE$/
MACHINE_ARCH	arch.c	/^#define MACHINE_ARCH TARGET_MACHINE_ARCH$/
MACHINE_CPU	arch.c	/^#define MACHINE_CPU TARGET_MACHINE_CPU$/
MAKEFLAGS	main.c	/^#define MAKEFLAGS	".MAKEFLAGS"$/
MAXIF	cond.c	/^#define MAXIF 30		\/* greatest depth of #if'ing */
MAX_DEPTH	var.c	/^#define MAX_DEPTH 350$/
MAYBE_ADD_SPACE	varmodifiers.c	/^#define MAYBE_ADD_SPACE()		\\$/
MainParseArgs	main.c	/^MainParseArgs(int argc, char **argv)$/
MainParseChdir	main.c	/^MainParseChdir(int argc, char **argv)$/
Main_ParseArgLine	main.c	/^Main_ParseArgLine(const char *line) 	\/* Line to f/
MakeAddChild	make.c	/^MakeAddChild(void *to_addp, void *ap)$/
MakeHandleUse	make.c	/^MakeHandleUse(void *cgnp, void *pgnp)$/
MakePrintStatus	make.c	/^MakePrintStatus(void *gnp)$/
MakeStartJobs	make.c	/^MakeStartJobs(void)$/
MakeTimeStamp	engine.c	/^MakeTimeStamp(void *parent, void *child)$/
Make_DoAllVar	engine.c	/^Make_DoAllVar(GNode *gn)$/
Make_HandleUse	engine.c	/^Make_HandleUse(GNode	*cgn,	\/* The .USE node *\/$/
Make_Init	make.c	/^Make_Init()$/
Make_OODate	engine.c	/^Make_OODate(GNode *gn)$/
Make_Run	make.c	/^Make_Run(Lst targs, bool *has_errors, bool *out_of/
Make_TimeStamp	engine.c	/^Make_TimeStamp(GNode *parent, GNode *child)$/
Make_Update	make.c	/^Make_Update(GNode *cgn)	\/* the child node *\/$/
Mmain	main.c	/^main(int argc, char **argv)$/
NameCompare	varmodifiers.c	/^NameCompare(const void *ap, const void *bp)$/
OPTFLAGS	main.c	/^#define OPTFLAGS "BC:D:I:SV:d:ef:ij:km:npqrst"$/
OPTLETTERS	main.c	/^#define OPTLETTERS "BSiknpqrst"$/
P	parse.c	/^#define P(k) k, sizeof(k), K_##k$/
PLACEHOLDER	timestamp.c	/^#define PLACEHOLDER "XXXXXXXXX "$/
POISONS	var.c	/^#define POISONS (POISON_NORMAL | POISON_EMPTY | PO/
PRINTBIT	targ.c	/^#define PRINTBIT(attr)	case CONCAT(OP_,attr): prin/
PRINTDBIT	targ.c	/^#define PRINTDBIT(attr) case CONCAT(OP_,attr): if /
ParseAddCmd	parse.c	/^ParseAddCmd(void *gnp, void *cmd)$/
ParseAddDep	parse.c	/^ParseAddDep(GNode *p, GNode *s)$/
ParseClearPath	parse.c	/^ParseClearPath(void *p)$/
ParseDoDependency	parse.c	/^ParseDoDependency(const char *line)	\/* the line t/
ParseDoOp	parse.c	/^ParseDoOp(GNode **gnp, unsigned int op)$/
ParseDoSpecial	parse.c	/^ParseDoSpecial(GNode *gn, unsigned int special_op)/
ParseDoSrc	parse.c	/^ParseDoSrc($/
ParseFindMain	parse.c	/^ParseFindMain(void *gnp, void *dummy UNUSED)$/
ParseHasCommands	parse.c	/^ParseHasCommands(void *gnp)$/
ParseLinkSrc	parse.c	/^ParseLinkSrc(GNode *pgn, GNode *cgn)$/
ParseReadLoopLine	parse.c	/^#define ParseReadLoopLine(linebuf) Parse_ReadUnpar/
ParseVErrorInternal	error.c	/^ParseVErrorInternal(const Location *origin, int ty/
Parse_AddIncludeDir	parse.c	/^Parse_AddIncludeDir(const char	*dir)$/
Parse_As_Var_Assignment	parsevar.c	/^Parse_As_Var_Assignment(const char *line)$/
Parse_CmdlineVar	parsevar.c	/^Parse_CmdlineVar(const char *line)$/
Parse_End	parse.c	/^Parse_End()$/
Parse_Error	error.c	/^Parse_Error(int type, const char *fmt, ...)$/
Parse_File	parse.c	/^Parse_File(const char *filename, FILE *stream)$/
Parse_FillLocation	lowparse.c	/^Parse_FillLocation(Location *origin)$/
Parse_FromFile	lowparse.c	/^Parse_FromFile(const char *name, FILE *stream)$/
Parse_FromString	lowparse.c	/^Parse_FromString(char *str, unsigned long lineno)$/
Parse_Getfilename	lowparse.c	/^Parse_Getfilename(void)$/
Parse_Getlineno	lowparse.c	/^Parse_Getlineno(void)$/
Parse_Init	parse.c	/^Parse_Init(void)$/
Parse_MainName	parse.c	/^Parse_MainName(Lst listmain)	\/* result list *\/$/
Parse_NextFile	lowparse.c	/^Parse_NextFile(void)$/
Parse_ReadNextConditionalLine	lowparse.c	/^Parse_ReadNextConditionalLine(Buffer linebuf)$/
Parse_ReadNormalLine	lowparse.c	/^Parse_ReadNormalLine(Buffer linebuf)$/
Parse_ReadUnparsedLine	lowparse.c	/^Parse_ReadUnparsedLine(Buffer linebuf, const char /
Parse_ReportErrors	lowparse.c	/^Parse_ReportErrors(void)$/
Parse_SetLocation	lowparse.c	/^Parse_SetLocation(Location *origin)$/
Parse_setcurdir	lowparse.c	/^Parse_setcurdir(const char *dir)$/
PathEntry	dir.c	/^struct PathEntry {$/
PathEntry_name	dir.c	/^PathEntry_name(struct PathEntry *p)$/
PathMatchFilesi	direxpand.c	/^PathMatchFilesi(const char *word, const char *ewor/
PrintAddr	suff.c	/^PrintAddr(void *a)$/
Punt	error.c	/^Punt(const char *fmt, ...)$/
READ_MAKEFILES	lowparse.c	/^#define READ_MAKEFILES "MAKEFILE_LIST"$/
ReadMakefile	main.c	/^ReadMakefile(void *p, void *q)$/
S	cond.c	/^#define S(s)	s, sizeof(s)-1$/
SOURCES_SIZE	parse.c	/^#define SOURCES_SIZE	128$/
SUFF_ACTIVE	suff.c	/^#define SUFF_ACTIVE	  0x08	\/* We never destroy su/
SUFF_PATH	suff.c	/^#define SUFF_PATH	  0x10	\/* False suffix: actuall/
SVR4ARCHIVES	arch.c	/^#define SVR4ARCHIVES$/
SVR4namelist	arch.c	/^struct SVR4namelist {$/
Sigset_Init	job.c	/^Sigset_Init()$/
Src	suff.c	/^} Src;$/
Str_Matchi	str.c	/^Str_Matchi(const char *string, const char *estring/
Str_SYSVMatch	str.c	/^Str_SYSVMatch(const char *word, const char *patter/
Str_SYSVSubst	str.c	/^Str_SYSVSubst(Buffer buf, const char *pat, const c/
Str_concati	str.c	/^Str_concati(const char *s1, const char *e1, const /
Str_dupi	str.c	/^Str_dupi(const char *begin, const char *end)$/
Str_rchri	str.c	/^Str_rchri(const char *begin, const char *end, int /
SuffAddLevel	suff.c	/^SuffAddLevel($/
SuffAddSrc	suff.c	/^SuffAddSrc($/
SuffApplyTransform	suff.c	/^SuffApplyTransform($/
SuffFindArchiveDeps	suff.c	/^SuffFindArchiveDeps($/
SuffFindCmds	suff.c	/^SuffFindCmds(Src *targ, Lst slst)$/
SuffFindDeps	suff.c	/^SuffFindDeps(GNode *gn, Lst slst)$/
SuffFindNormalDeps	suff.c	/^SuffFindNormalDeps($/
SuffFindThem	suff.c	/^SuffFindThem($/
SuffInsert	suff.c	/^SuffInsert(Lst l, Suff *s)$/
SuffPrintName	suff.c	/^SuffPrintName(void *p)$/
SuffPrintSuff	suff.c	/^SuffPrintSuff(void *sp)$/
SuffPrintTrans	suff.c	/^SuffPrintTrans(GNode *t)$/
SuffRemoveSrc	suff.c	/^SuffRemoveSrc(Lst l)$/
Suff_	suff.c	/^struct Suff_ {$/
Suff_AddSuffixi	suff.c	/^Suff_AddSuffixi(const char *str, const char *end)$/
Suff_DisableAllSuffixes	suff.c	/^Suff_DisableAllSuffixes(void)$/
Suff_FindDeps	suff.c	/^Suff_FindDeps(GNode *gn)$/
Suff_Init	suff.c	/^Suff_Init(void)$/
Suff_ParseAsTransform	suff.c	/^Suff_ParseAsTransform(const char *line, const char/
Suff_PrintAll	suff.c	/^Suff_PrintAll(void)$/
SymTable_Init	var.c	/^SymTable_Init(SymTable *ctxt)$/
TARGETS_SIZE	parse.c	/^#define TARGETS_SIZE	32$/
TargPrintName	dump.c	/^TargPrintName(void *gnp)$/
TargPrintNode	dump.c	/^TargPrintNode(GNode *gn, bool full)$/
TargPrintOnlySrc	dump.c	/^TargPrintOnlySrc(GNode *gn)$/
Targ_FindList	targ.c	/^Targ_FindList(Lst nodes, Lst names)$/
Targ_FindNodei	targ.c	/^Targ_FindNodei(const char *name, const char *ename/
Targ_Ignore	targ.c	/^Targ_Ignore(GNode *gn)$/
Targ_Init	targ.c	/^Targ_Init(void)$/
Targ_NewGNi	targ.c	/^Targ_NewGNi(const char *name, const char *ename)$/
Targ_Precious	targ.c	/^Targ_Precious(GNode *gn)$/
Targ_PrintCmd	targ.c	/^Targ_PrintCmd(void *p)$/
Targ_PrintType	targ.c	/^Targ_PrintType(int type)$/
Targ_Silent	targ.c	/^Targ_Silent(GNode *gn)$/
Targ_mk_constant	targ.c	/^#define Targ_mk_constant(n, type) \\$/
Targ_mk_node	targ.c	/^Targ_mk_node(const char *name, const char *ename, /
Targ_mk_special_node	targ.c	/^Targ_mk_special_node(const char *name, size_t n, u/
Targ_setdirs	targequiv.c	/^Targ_setdirs(const char *c, const char *o)$/
Token	cond.c	/^} Token;$/
VAR_ADD_EQUAL	varmodifiers.c	/^#define VAR_ADD_EQUAL	0x80$/
VAR_APPEND	parsevar.c	/^#define VAR_APPEND	2$/
VAR_BANG_EQUAL	varmodifiers.c	/^#define VAR_BANG_EQUAL	0x100$/
VAR_DUMMY	var.c	/^#define VAR_DUMMY	2	\/* Variable is currently just/
VAR_EQUAL	varmodifiers.c	/^#define VAR_EQUAL	0x20$/
VAR_FROM_CMD	var.c	/^#define VAR_FROM_CMD	4	\/* Special source: command/
VAR_FROM_ENV	var.c	/^#define VAR_FROM_ENV	8	\/* Special source: environ/
VAR_INVALID	parsevar.c	/^#define VAR_INVALID	-1$/
VAR_IN_USE	var.c	/^#define VAR_IN_USE	1	\/* Variable's value currentl/
VAR_IS_SHELL	var.c	/^#define VAR_IS_SHELL	32	\/* Magic behavior *\/$/
VAR_LAZYSHELL	parsevar.c	/^#define VAR_LAZYSHELL	16$/
VAR_MATCH_END	varmodifiers.c	/^#define VAR_MATCH_END	0x10	\/* Match at end of wor/
VAR_MATCH_START	varmodifiers.c	/^#define VAR_MATCH_START 0x08	\/* Match at start of/
VAR_MAY_EQUAL	varmodifiers.c	/^#define VAR_MAY_EQUAL	0x40$/
VAR_NORMAL	parsevar.c	/^#define VAR_NORMAL	0$/
VAR_OPT	parsevar.c	/^#define VAR_OPT		8$/
VAR_SEEN_ENV	var.c	/^#define VAR_SEEN_ENV	16	\/* No need to go look up /
VAR_SHELL	parsevar.c	/^#define VAR_SHELL	4$/
VAR_SUBST	parsevar.c	/^#define VAR_SUBST	1$/
VAR_SUB_GLOBAL	varmodifiers.c	/^#define VAR_SUB_GLOBAL	0x01	\/* Apply substitution/
VAR_SUB_MATCHED	varmodifiers.c	/^#define VAR_SUB_MATCHED 0x04	\/* There was a match/
VAR_SUB_ONE	varmodifiers.c	/^#define VAR_SUB_ONE	0x02	\/* Apply substitution to/
VAR_SUNSHELL	parsevar.c	/^#define VAR_SUNSHELL	32$/
Var	var.c	/^}  Var;$/
VarGetPattern	varmodifiers.c	/^VarGetPattern(SymTable *ctxt, int err, const char /
VarHead	varmodifiers.c	/^VarHead(struct Name *word, bool addSpace, Buffer b/
VarLoop	varmodifiers.c	/^VarLoop(struct Name *word, bool addSpace, Buffer b/
VarMatch	varmodifiers.c	/^VarMatch(struct Name *word, bool addSpace, Buffer /
VarModifiers_Apply	varmodifiers.c	/^VarModifiers_Apply(char *str, const struct Name *n/
VarModifiers_Init	varmodifiers.c	/^VarModifiers_Init()$/
VarModify	varmodifiers.c	/^VarModify(char *str, 		\/* String whose words shou/
VarName_Free	varname.c	/^VarName_Free(struct Name *name)$/
VarName_Get	varname.c	/^VarName_Get(const char *start, struct Name *name, /
VarNoMatch	varmodifiers.c	/^VarNoMatch(struct Name *word, bool addSpace, Buffe/
VarPattern	varmodifiers.c	/^} VarPattern;$/
VarQuote	varmodifiers.c	/^VarQuote(const char *str, const struct Name *n UNU/
VarREError	varmodifiers.c	/^VarREError(int err, regex_t *pat, const char *str)/
VarREPattern	varmodifiers.c	/^} VarREPattern;$/
VarRESubstitute	varmodifiers.c	/^VarRESubstitute(struct Name *word, bool addSpace, /
VarRoot	varmodifiers.c	/^VarRoot(struct Name *word, bool addSpace, Buffer b/
VarSYSVMatch	varmodifiers.c	/^VarSYSVMatch(struct Name *word, bool addSpace, Buf/
VarSubstitute	varmodifiers.c	/^VarSubstitute(struct Name *word, bool addSpace, Bu/
VarSuffix	varmodifiers.c	/^VarSuffix(struct Name *word, bool addSpace, Buffer/
VarTail	varmodifiers.c	/^VarTail(struct Name *word, bool addSpace, Buffer b/
VarUniq	varmodifiers.c	/^VarUniq(struct Name *word, bool addSpace, Buffer b/
Var_AddCmdline	var.c	/^Var_AddCmdline(const char *name)$/
Var_Appendi_with_ctxt	var.c	/^Var_Appendi_with_ctxt(const char *name, const char/
Var_Check_for_target	var.c	/^Var_Check_for_target(const char *str)$/
Var_Definedi	var.c	/^Var_Definedi(const char *name, const char *ename)$/
Var_DeleteLoopVar	var.c	/^Var_DeleteLoopVar(struct LoopVar *l)$/
Var_Deletei	var.c	/^Var_Deletei(const char *name, const char *ename)$/
Var_Dump	var.c	/^Var_Dump(void)$/
Var_GetHead	varmodifiers.c	/^Var_GetHead(char *s)$/
Var_GetTail	varmodifiers.c	/^Var_GetTail(char *s)$/
Var_Init	var.c	/^Var_Init(void)$/
Var_LoopVarName	var.c	/^Var_LoopVarName(struct LoopVar *v)$/
Var_Mark	var.c	/^Var_Mark(const char *name, const char *ename, unsi/
Var_NewLoopVar	var.c	/^Var_NewLoopVar(const char *name, const char *ename/
Var_Parse	var.c	/^Var_Parse(const char *str,	\/* The string to parse/
Var_ParseBuffer	var.c	/^Var_ParseBuffer(Buffer buf, const char *str, SymTa/
Var_ParseSkip	var.c	/^Var_ParseSkip(const char **pstr, SymTable *ctxt)$/
Var_Seti_with_ctxt	var.c	/^Var_Seti_with_ctxt(const char *name, const char *e/
Var_Subst	var.c	/^Var_Subst(const char *str,	\/* the string in which/
Var_SubstVar	var.c	/^Var_SubstVar(Buffer buf,	\/* To store result *\/$/
Var_Substi	var.c	/^Var_Substi(const char *str, const char *estr, SymT/
Var_Valuei	var.c	/^Var_Valuei(const char *name, const char *ename)$/
Var_setCheckEnvFirst	var.c	/^Var_setCheckEnvFirst(bool yes)$/
absolute_reduce	targequiv.c	/^absolute_reduce(const char *src)$/
add_archive_node	arch.c	/^add_archive_node(Lst nodes, const char *name)$/
add_dirpath	main.c	/^add_dirpath(Lst l, const char *n)$/
add_file	dir.c	/^add_file(struct PathEntry *p, const char *file)$/
add_suffixi	suff.c	/^add_suffixi(const char *str, const char *end)$/
add_target_node	parse.c	/^add_target_node(const char *line, const char *end)/
add_target_nodes	parse.c	/^add_target_nodes(const char *line, const char *end/
add_targets_to_make	make.c	/^add_targets_to_make(Lst todo)$/
add_to_equiv_list	targequiv.c	/^add_to_equiv_list(struct ohash *equiv, GNode *gn)$/
apply_op	parse.c	/^apply_op(struct growableArray *targets, unsigned i/
arch_member	arch.c	/^struct arch_member {$/
assign_get_value	varmodifiers.c	/^assign_get_value(const char **p, SymTable *ctxt, b/
attach_node	targequiv.c	/^attach_node(GNode *gn, GNode *extra)$/
average_runs	stats.c	/^average_runs(unsigned long val)$/
bad_dynamic_variable	var.c	/^bad_dynamic_variable(int idx)$/
break_and_print_cycles	make.c	/^break_and_print_cycles(Lst t)$/
brk_string	str.c	/^brk_string(const char *str, int *store_argc, char /
buf_addcurdir	job.c	/^buf_addcurdir(BUFFER *buf)$/
build_equivalence	targequiv.c	/^build_equivalence()$/
build_suffixes_graph	suff.c	/^build_suffixes_graph(void)$/
build_target_group	parse.c	/^build_target_group(struct growableArray *targets, /
build_words_list	for.c	/^build_words_list(Lst lst, const char *s)$/
can_start_job	job.c	/^can_start_job(void)$/
chdir_verify_path	main.c	/^chdir_verify_path(const char *path, struct dirs *d/
check_dying_signal	job.c	/^check_dying_signal(void)$/
check_empty	varmodifiers.c	/^check_empty(const char **p, SymTable *ctxt UNUSED,/
check_quote	varmodifiers.c	/^check_quote(const char **p, SymTable *ctxt UNUSED,/
check_shcmd	varmodifiers.c	/^check_shcmd(const char **p, SymTable *ctxt UNUSED,/
choose_engine	enginechoice.c	/^choose_engine(bool compat)$/
classify_var	var.c	/^classify_var(const char *name, const char **enameP/
common_get_patternarg	varmodifiers.c	/^common_get_patternarg(const char **p, SymTable *ct/
compare_names	dump.c	/^compare_names(const void *a, const void *b)$/
compare_order	suff.c	/^compare_order(const void *a, const void *b)$/
create_PathEntry	dir.c	/^create_PathEntry(const char *name, const char *ena/
create_special_nodes	parse.c	/^create_special_nodes()$/
create_var	var.c	/^create_var(const char *name, const char *ename)$/
debug_job_printf	job.c	/^debug_job_printf(const char *fmt, ...)$/
debug_kill_printf	job.c	/^debug_kill_printf(const char *fmt, ...)$/
debug_vprintf	job.c	/^debug_vprintf(const char *fmt, va_list va)$/
dedup_targets	parse.c	/^dedup_targets(struct growableArray *targets)$/
delete_var	var.c	/^delete_var(Var *v)$/
determine_expensive_job	job.c	/^determine_expensive_job(Job *job)$/
determine_job_next_step	job.c	/^determine_job_next_step(Job *job)$/
dirs	main.c	/^struct dirs {$/
do_assign	varmodifiers.c	/^do_assign(const char *s, const struct Name *n, voi/
do_def	varmodifiers.c	/^do_def(const char *s, const struct Name *n UNUSED,/
do_exec	varmodifiers.c	/^do_exec(const char *s UNUSED, const struct Name *n/
do_label	varmodifiers.c	/^do_label(const char *s UNUSED, const struct Name */
do_lower	varmodifiers.c	/^do_lower(const char *s, const struct Name *n UNUSE/
do_path	varmodifiers.c	/^do_path(const char *s UNUSED, const struct Name *n/
do_regex	varmodifiers.c	/^do_regex(const char *s, const struct Name *n UNUSE/
do_run_command	engine.c	/^do_run_command(Job *job, const char *pre)$/
do_shcmd	varmodifiers.c	/^do_shcmd(const char *s, const struct Name *n UNUSE/
do_sort	varmodifiers.c	/^do_sort(const char *s, const struct Name *dummy UN/
do_undef	varmodifiers.c	/^do_undef(const char *s, const struct Name *n UNUSE/
do_upper	varmodifiers.c	/^do_upper(const char *s, const struct Name *n UNUSE/
drop_silently	engine.c	/^drop_silently(const char *s)$/
dump_data	dump.c	/^dump_data(void)$/
dump_special	dump.c	/^dump_special(GNode **t, const char *name, int prop/
dump_targets	parse.c	/^dump_targets()$/
element_alloc	memory.c	/^element_alloc(size_t s, void *u UNUSED)$/
emalloc	memory.c	/^emalloc(size_t size)$/
engine	enginechoice.c	/^struct engine {$/
engine_node_updated	enginechoice.c	/^engine_node_updated(GNode *gn)$/
engine_run_list	enginechoice.c	/^engine_run_list(Lst l, bool *has_errors, bool *out/
enocmem	memory.c	/^enocmem(size_t sz1, size_t sz2)$/
enomem	memory.c	/^enomem(size_t size)$/
equiv_list	targequiv.c	/^struct equiv_list {$/
erealloc	memory.c	/^erealloc(void *ptr, size_t size)$/
ereallocarray	memory.c	/^ereallocarray(void *ptr, size_t s1, size_t s2)$/
escape_dupi	str.c	/^escape_dupi(const char *begin, const char *end, co/
esetenv	memory.c	/^esetenv(const char *name, const char *value)$/
estrdup	memory.c	/^estrdup(const char *str)$/
eunlink	memory.c	/^eunlink(const char *file)$/
expand_children_from	expandchildren.c	/^expand_children_from(GNode *parent, LstNode from)$/
expensive_command	job.c	/^expensive_command(const char *s)$/
expensive_job	job.c	/^expensive_job(Job *job)$/
fatal_overflow	buf.c	/^fatal_overflow()$/
field2long	arch.c	/^field2long(const char *field, size_t length)$/
figure_out_CURDIR	main.c	/^figure_out_CURDIR()$/
figure_out_MACHINE	main.c	/^figure_out_MACHINE()$/
figure_out_MACHINE_ARCH	main.c	/^figure_out_MACHINE_ARCH()$/
figure_out_MACHINE_CPU	main.c	/^figure_out_MACHINE_CPU()$/
file_stamp	dir.c	/^struct file_stamp {$/
fill_from_env	var.c	/^fill_from_env(Var *v)$/
find_best_path	suff.c	/^find_best_path(const char *name)$/
find_best_suffix	suff.c	/^find_best_suffix(const char *s, const char *e)$/
find_cond	cond.c	/^find_cond(const char *p)$/
find_cycle	make.c	/^find_cycle(Lst l, struct growableArray *cycle)$/
find_file_hashi	dir.c	/^find_file_hashi(struct PathEntry *p, const char *f/
find_global_var	var.c	/^find_global_var(const char *name, const char *enam/
find_global_var_without_env	var.c	/^find_global_var_without_env(const char *name, cons/
find_ket	var.c	/^find_ket(const char *p)$/
find_op1	parsevar.c	/^find_op1(const char *p)$/
find_op2	parsevar.c	/^find_op2(const char *p)$/
find_or_create_transformi	suff.c	/^find_or_create_transformi(const char *name, const /
find_pos	var.c	/^find_pos(int c)$/
find_rparen	var.c	/^find_rparen(const char *p)$/
find_siblings	targequiv.c	/^find_siblings(GNode *gn)$/
find_stampi	dir.c	/^find_stampi(const char *file, const char *efile)$/
find_suff	suff.c	/^#define find_suff(name)	find_suffi(name, NULL)$/
find_suffi	suff.c	/^find_suffi(const char *name, const char *ename)$/
find_suffix_as_suffix	suff.c	/^find_suffix_as_suffix(Lst l, const char *b, const /
find_suffix_path	suff.c	/^find_suffix_path(GNode *gn)$/
find_t	var.c	/^typedef const char * (*find_t)(const char *);$/
find_transform	suff.c	/^find_transform(const char *name)$/
finish_commands	parse.c	/^finish_commands(struct growableArray *targets)$/
finish_loop	varmodifiers.c	/^finish_loop(const char *s, const struct Name *n UN/
found_delimiter	parse.c	/^found_delimiter(const char *s)$/
free_hash	memory.c	/^free_hash(struct ohash *h)$/
free_input_stream	lowparse.c	/^free_input_stream(struct input_stream *istream)$/
free_looparg	varmodifiers.c	/^free_looparg(void *arg)$/
free_patternarg	varmodifiers.c	/^free_patternarg(void *p)$/
free_stringarg	varmodifiers.c	/^free_stringarg(void *arg)$/
get_cmd	varmodifiers.c	/^get_cmd(const char **p, SymTable *ctxt, bool err, /
get_expanded_value	var.c	/^get_expanded_value(const char *name, const char *e/
get_loop	varmodifiers.c	/^get_loop(const char **p, SymTable *ctxt UNUSED, bo/
get_patternarg	varmodifiers.c	/^get_patternarg(const char **p, SymTable *ctxt, boo/
get_spatternarg	varmodifiers.c	/^get_spatternarg(const char **p, SymTable *ctxt, bo/
get_stringarg	varmodifiers.c	/^get_stringarg(const char **p, SymTable *ctxt UNUSE/
get_sysvpattern	varmodifiers.c	/^get_sysvpattern(const char **p, SymTable *ctxt UNU/
get_value	varmodifiers.c	/^get_value(const char **p, SymTable *ctxt, bool err/
grab_new_line_and_readchar	lowparse.c	/^grab_new_line_and_readchar(void)$/
handle_all_signals	job.c	/^handle_all_signals(void)$/
handle_bsd_command	parse.c	/^handle_bsd_command(Buffer linebuf, Buffer copy, co/
handle_fatal_signal	job.c	/^handle_fatal_signal(int signo)$/
handle_for_loop	parse.c	/^handle_for_loop(Buffer linebuf, const char *line)$/
handle_include_file	parse.c	/^handle_include_file(const char *file, const char */
handle_job_status	engine.c	/^handle_job_status(Job *job, int status)$/
handle_poison	parse.c	/^handle_poison(const char *line)$/
handle_running_jobs	job.c	/^handle_running_jobs(void)$/
handle_siginfo	job.c	/^handle_siginfo(void)$/
handle_special_targets	parse.c	/^handle_special_targets(Lst paths)$/
handle_undef	parse.c	/^handle_undef(const char *line)$/
has_predecessor_left_to_build	make.c	/^has_predecessor_left_to_build(GNode *gn)$/
hash_calloc	memory.c	/^hash_calloc(size_t n, size_t s, void *u UNUSED)$/
hash_free	memory.c	/^hash_free(void *p, void *u UNUSED)$/
input_stream	lowparse.c	/^struct input_stream {$/
internal_print_errors	job.c	/^internal_print_errors()$/
interpret	var.c	/^interpret(int f)$/
is_sibling	targequiv.c	/^is_sibling(GNode *gn, GNode *gn2)$/
iterate_words	str.c	/^iterate_words(const char **end)$/
job_attach_node	engine.c	/^job_attach_node(Job *job, GNode *node)$/
job_run_next	engine.c	/^job_run_next(Job *job)$/
kludge_look_harder_for_target	targequiv.c	/^kludge_look_harder_for_target(GNode *gn)$/
list_parents	engine.c	/^list_parents(GNode *gn, FILE *out)$/
look_harder_for_target	targequiv.c	/^look_harder_for_target(GNode *gn)$/
lookup_bsd_include	parse.c	/^lookup_bsd_include(const char *file)$/
lookup_conditional_include	parse.c	/^lookup_conditional_include(const char *file, const/
lookup_sysv_include	parse.c	/^lookup_sysv_include(const char *file, const char */
lookup_sysv_style_include	parse.c	/^lookup_sysv_style_include(const char *line, const /
loop_handle_running_jobs	job.c	/^loop_handle_running_jobs()$/
make_suffix_known	suff.c	/^make_suffix_known(Suff *s)$/
may_continue_heldback_jobs	job.c	/^may_continue_heldback_jobs()$/
may_continue_job	job.c	/^may_continue_job(Job *job)$/
may_remove_target	job.c	/^may_remove_target(Job *j)$/
modifier	varmodifiers.c	/^static struct modifier {$/
mtime_of_member	arch.c	/^mtime_of_member(struct arch_member *m)$/
names_match	targequiv.c	/^names_match(GNode *a, GNode *b)$/
names_match_with_dir	targequiv.c	/^names_match_with_dir(const char *a, const char *b,/
names_match_with_dirs	targequiv.c	/^names_match_with_dirs(const char *a, const char *b/
new_arch_member	arch.c	/^new_arch_member(struct ar_hdr *hdr, const char *na/
new_input_file	lowparse.c	/^new_input_file(const char *name, FILE *stream)$/
new_input_string	lowparse.c	/^new_input_string(char *str, const Location *origin/
new_suffix	suff.c	/^#define new_suffix(s)	new_suffixi(s, NULL)$/
new_suffixi	suff.c	/^new_suffixi(const char *str, const char *eptr)$/
node_failure	engine.c	/^node_failure(GNode *gn)$/
node_find_valid_commands	engine.c	/^node_find_valid_commands(GNode *gn)$/
node_is_real	targ.c	/^node_is_real(GNode *gn)$/
nothing_left_to_build	make.c	/^nothing_left_to_build()$/
notice_signal	job.c	/^notice_signal(int sig)$/
operator	cond.c	/^static struct operator {$/
operator_string	parse.c	/^operator_string(int op)$/
parse_archive	arch.c	/^parse_archive(Buffer expand, const char **linePtr,/
parse_as_special_line	parse.c	/^parse_as_special_line(Buffer buf, Buffer copy, con/
parse_base_variable_name	var.c	/^parse_base_variable_name(const char **pstr, struct/
parse_commands	parse.c	/^parse_commands(struct growableArray *targets, cons/
parse_do_targets	parse.c	/^parse_do_targets(Lst paths, unsigned int *op, cons/
parse_operator	parse.c	/^parse_operator(const char **pos)$/
parse_reduce	targequiv.c	/^parse_reduce(size_t i, const char *src)$/
parse_target_line	parse.c	/^parse_target_line(struct growableArray *targets, c/
parse_transform	suff.c	/^#define parse_transform(s, p, q) parse_transformi(/
parse_transformi	suff.c	/^parse_transformi(const char *str, const char *e, S/
parse_variable_assignment	parsevar.c	/^parse_variable_assignment(const char *line, int ct/
poison_check	var.c	/^poison_check(Var *v)$/
pop_used	var.c	/^pop_used(Var *v)$/
posixParseOptLetter	main.c	/^posixParseOptLetter(int c)$/
post_mortem	dump.c	/^post_mortem(void)$/
postprocess_job	job.c	/^postprocess_job(Job *job)$/
print_error	job.c	/^print_error(Job *j)$/
print_errors	job.c	/^print_errors(void)$/
print_path	suff.c	/^print_path(Suff *s)$/
print_stats	stats.c	/^print_stats(void)$/
print_unlink_cycle	make.c	/^print_unlink_cycle(struct growableArray *l, GNode /
print_var	var.c	/^print_var(Var *v)$/
process_suffixes_after_makefile_is_read	suff.c	/^process_suffixes_after_makefile_is_read(void)$/
push_used	var.c	/^push_used(Var *v)$/
quick_error	job.c	/^quick_error(Job *j, int signo, bool first)$/
quick_summary	job.c	/^quick_summary(int signo)$/
random_setup	make.c	/^random_setup()$/
randomize_garray	make.c	/^randomize_garray(struct growableArray *g)$/
range_match	str.c	/^range_match(char c, const char **ppat, const char /
read_all_make_rules	main.c	/^read_all_make_rules(bool noBuiltins, bool read_dep/
read_archive	arch.c	/^read_archive(const char *archive, const char *earc/
read_char	lowparse.c	/^#define read_char()	\\$/
read_directory	dir.c	/^read_directory(struct PathEntry *p)$/
read_logical_line	lowparse.c	/^read_logical_line(Buffer linebuf, int c)$/
read_makefile_list	main.c	/^read_makefile_list(Lst mk, struct dirs *d)$/
really_kill	job.c	/^really_kill(Job *job, int signo)$/
reap_finished_job	job.c	/^reap_finished_job(pid_t pid)$/
reap_jobs	job.c	/^reap_jobs(void)$/
recheck_command_for_shell	engine.c	/^recheck_command_for_shell(char **av)$/
record_option	main.c	/^record_option(int c, const char *arg)$/
record_possible_suffix	suff.c	/^record_possible_suffix(Suff *s, GNode *gn, char *e/
record_possible_suffixes	suff.c	/^record_possible_suffixes(GNode *gn, Lst srcs, Lst /
record_stamp	dir.c	/^record_stamp(const char *file, struct timespec t)$/
register_target	parse.c	/^register_target(GNode *gn, struct ohash *t)$/
relative_reduce	targequiv.c	/^relative_reduce(const char *dir, const char *src)$/
relative_reduce2	targequiv.c	/^relative_reduce2(const char *dir1, const char *dir/
requeue	make.c	/^requeue(GNode *gn)$/
requeue_successors	make.c	/^requeue_successors(GNode *gn)$/
reset_signal_mask	job.c	/^reset_signal_mask()$/
reset_target_hash	parse.c	/^reset_target_hash()$/
resolve_include_filename	parse.c	/^resolve_include_filename(const char *file, const c/
reverse_hash_add_char	suff.c	/^reverse_hash_add_char(uint32_t *pk, const char *s)/
reverse_hashi	suff.c	/^reverse_hashi(const char *s, const char **e)$/
reverse_slot	suff.c	/^reverse_slot(struct ohash *h, const char *s, const/
rewrite_time	engine.c	/^rewrite_time(const char *name)$/
run_command	engine.c	/^run_command(const char *cmd, bool errCheck)$/
run_gnode	engine.c	/^run_gnode(GNode *gn)$/
run_node	main.c	/^run_node(GNode *gn, bool *has_errors, bool *out_of/
set_magic_shell_variable	var.c	/^set_magic_shell_variable()$/
set_notparallel	main.c	/^set_notparallel()$/
set_times	timestamp.c	/^set_times(const char *f)$/
setup_CURDIR_OBJDIR	main.c	/^setup_CURDIR_OBJDIR(struct dirs *d)$/
setup_VPATH	main.c	/^setup_VPATH()$/
setup_all_signals	job.c	/^setup_all_signals(void)$/
setup_engine	engine.c	/^setup_engine(void)$/
setup_meta	engine.c	/^setup_meta(void)$/
setup_paths	suff.c	/^setup_paths(void)$/
setup_signal	job.c	/^setup_signal(int sig)$/
shortened_curdir	job.c	/^shortened_curdir(void)$/
simplify	lowparse.c	/^simplify(const char *filename)$/
skip_empty_lines_and_read_char	lowparse.c	/^skip_empty_lines_and_read_char(Buffer linebuf)$/
skip_to_end_of_line	lowparse.c	/^skip_to_end_of_line(void)$/
sort_ohash	dump.c	/^sort_ohash(struct ohash *h, int (*comparison)(cons/
sort_ohash_by_name	dump.c	/^sort_ohash_by_name(struct ohash *h)$/
special_path_hack	suff.c	/^special_path_hack(void)$/
star_match	str.c	/^star_match(const char *string, const char *estring/
startswith	lowparse.c	/^startswith(const char *f, const char *s, size_t le/
status_to_string	targ.c	/^status_to_string(GNode *gn)$/
strip_comments	parse.c	/^strip_comments(Buffer copy, const char *line)$/
suffix_is_suffix	suff.c	/^suffix_is_suffix(Suff *s, const char *str, const c/
targ_dump	dump.c	/^targ_dump(bool full)$/
targets_contain_cycles	make.c	/^targets_contain_cycles(void)$/
targets_hash	targ.c	/^targets_hash()$/
time_to_string	timestamp.c	/^time_to_string(struct timespec *t)$/
try_to_make_node	make.c	/^try_to_make_node(GNode *gn)$/
usage	main.c	/^usage()$/
var_append_value	var.c	/^var_append_value(Var *v, const char *val)$/
var_exec_cmd	var.c	/^var_exec_cmd(Var *v)$/
var_get_value	var.c	/^#define var_get_value(v)	((v)->flags & VAR_EXEC_LA/
var_set_append	var.c	/^var_set_append(const char *name, const char *ename/
var_set_initial_value	var.c	/^var_set_initial_value(Var *v, const char *val)$/
var_set_value	var.c	/^var_set_value(Var *v, const char *val)$/
